#:kivy 1.8.0
#:import SlideTransition kivy.uix.screenmanager.SlideTransition 
#:set COLOR_HIGHLIGHT (0.788235294, 0.643137255, 1)
#:set COLOR_BACKGROUND (0.349019608, 0.082352941, 0.658823529)
#:set COLOR_BACKGROUND_A50 (0.349019608, 0.082352941, 0.658823529, .5)
#:set COLOR_BORDER (0.643137255, 0.160784314, 1)
#:set COLOR_BORDER_A50 (0.643137255, 0.160784314, 1, .5)
#:set COLOR_BORDER_A75 (0.643137255, 0.160784314, 1, .75)
#:set COLOR_HIGHLIGHT_A50 (0.788235294, 0.643137255, 1, .5)
#:set COLOR_HIGHLIGHT_A100 (0.788235294, 0.643137255, 1, 1.0)
#:set COLOR_BACKGROUND_A100 (0.349019608, 0.082352941, 0.658823529, 1.0)
#:set COLOR_BORDER_A100 (0.643137255, 0.160784314, 1, 1.0)

TestGame:

<Button>:
    background_color: 1., 1., 1., .8

<TestGame>:
    gameworld: gameworld
    GameWorld:
        id: gameworld
        gamescreenmanager: gamescreenmanager
        PositionSystem:
            system_id: 'position'
            gameworld: gameworld
        RotateSystem:
            system_id: 'rotate'
            gameworld: gameworld
        ColorSystem:
            system_id: 'color'
            gameworld: gameworld
        ScaleSystem:
            system_id: 'scale'
            gameworld: gameworld
        GameView:
            system_id: 'gameview'
            focus_entity: False
            updateable: True
            gameworld: gameworld
            pos: root.pos
            do_scroll: True
            do_scroll_lock: False
            size: root.size
            #camera_scale: 2.0
        GameMap:
            system_id: 'map'
            map_size: root.size
            gameworld: gameworld
        Renderer:
            gameworld: gameworld
            system_id: 'renderer'
            do_rotate: True
            do_color: True
            do_scale: True
            shader_source: 'assets/glsl/positioncolorrotatescaleshader.glsl'
            gameview: 'gameview'
        CymunkPhysics:
            gameworld: root.gameworld
            system_id: 'physics'
    GameScreenManager:
        id: gamescreenmanager
        size: root.size
        pos: root.pos
        gameworld: gameworld

<GameScreenManager>:
    MainScreen:
        id: main_screen


<colpicker>
    #pup:pup
    #on_touch_down:pup.open()
    canvas.before:
        Color:
            rgba: self.col
        Rectangle:
            # self here refers to the widget i.e BoxLayout
            pos: self.pos
            size: self.size
    #Popup:
    #    id:pup
    #    ColorPicker:
    #        id:cpr


<FloatInput>
    multiline: False
<tbox>
    multiline: False
<CircleSettings>
    radiusLabel:radiusLabel
    size_hint_y:None
    height:30
    BoxLayout:
        Label:
            text: "radius:"
        FloatInput:
            id: radiusLabel
            multiline: False
            text: "radius"
<BoxSettings>
    orientation: 'vertical'
    widthLabel:widthLabel
    heightLabel:heightLabel
    spacing: 4
    #size_hint_y:None
    #height:60
    #rows_minimum:60
    BoxLayout:
        Label:
            text: "width:"
        FloatInput:
            id: widthLabel
            multiline: False
            text: "width"
    BoxLayout:
        Label:
            text: "height:"
        FloatInput:
            id: heightLabel
            multiline: False
            text: "height"
<entDataItem>
    size_hint_y: None
    height: 30
    keyLabel: keyLabel
    valueLabel: valueLabel
    Label:
        id: keyLabel
        text: ""
        #values: app.root.mainTools.data_key_types
        #on_text: root.typeChanged(self)
    Label:
        text:"="
        size_hint_x: None
        width: self.height
    TextInput:
        id: valueLabel
        multiline: False
        text: ""
        on_text: root.valueChanged(self)
<entDataBox>
    orientation: 'vertical'
    dataItems: dataItems
    BoxLayout:
        id: dataItems
    Button:
        size_hint_y: None
        height: 30
        text: "Add Item"
        on_press: root.newItem()#dataItems.add_widget(entDataItem())

<levelItem>
    orientation: 'horizontal'
    nameLabel: nameLabel
    authorLabel: authorLabel
    createdLabel: createdLabel
    modifiedLabel: modifiedLabel
    downloadButton: downloadButton
    downloadsLabel: downloadsLabel
    screenShot: screenShot
    AsyncImage:
        id:screenShot
    Label:
        id: nameLabel
        text: "Name"
    #Label:
    #    text: "Rating"
    Label:
        id: authorLabel
        text: "Author"
    Label:
        id: createdLabel
        text: "Created"
    Label:
        id: modifiedLabel
        text: "Modified"
    Button:
        id: downloadButton
        text: "Download"
    Label:
        id: downloadsLabel
        text: "Downloads"

<downloads>
    orientation: 'vertical'
    levelBox: levelBox
    sortSpinner: sortSpinner
    reverseButton: reverseButton

    BoxLayout:
        size_hint_y: 0.1
        orientation: 'horizontal'
        Label:
            text: "sort by:"
        Spinner:
            id: sortSpinner
            text: "dateAdded"
            values: ['name', 'author', 'rating', 'dateAdded', 'downloads', 'dateModified']
            #on_text: root.typeChanged(self)

        ToggleButton:
            id: reverseButton
            text:"reverse"
            state: "down"
        Button:
            text:"GO"
            on_press: root.goPressed(self)
    BoxLayout:
        size_hint_y: 0.1
        orientation: 'horizontal'
        Label:
        Button:
            text:"Name"
            on_press: root.setSort('name')
        Button:
            on_press: root.setSort('author')
            text: "Author"
        Button:
            on_press: root.setSort('dateAdded')
            text: "Created"
        Button:
            on_press: root.setSort('dateModified')
            text: "Modified"
        Label:
        Button:
            on_press: root.setSort('downloads')
            text: "Downloads"
    BoxLayout:
        id: levelBox
        orientation: 'vertical'
    BoxLayout:
        size_hint_y: 0.1
        orientation: 'horizontal'
        Button:
            text: "previous"
            on_press: root.prevPage()
        Button:
            text: "next"
            on_press: root.nextPage()

<saveas>
    orientation: 'vertical'

    nameLabel: nameLabel
    #screenShot: screenShot


    BoxLayout:
        orientation: 'horizontal'
        Label:
            text: "Name"
        tbox:
            id: nameLabel
            text:""
    #Image:
    #    id:screenShot
    Button:
        text:"Save"
        on_press: root.savePressed(self)
<uploads>
    orientation: 'vertical'
    userName: userName
    password: password

    nameLabel: nameLabel
    screenShot: screenShot
    descLabel: descLabel

    BoxLayout:
        Button:
            text:""
            size_hint_x: 0
            width: 0
        tbox:
            id: userName
            text: "Guest"
        tbox:
            id: password
            text: "nopassword"
        Button:
            text:"Check/Create"
            #size_hint_x: None
            #width: self.height
            on_press: root.userPressed(self)
    Label:
        id: nameLabel
        text:"LevelName"
    Image:
        id:screenShot
    #tags? #compatible games?
    tbox:
        id: descLabel
        text:"Description"
    Button:
        text:"UpLoad!"
        on_press: root.uploadPressed(self)

<callbacks>
    orientation: 'vertical'
    colTypeASpinner: colTypeASpinner
    colTypeBSpinner: colTypeBSpinner

    beginSpinner: beginSpinner
    pre_solveSpinner: pre_solveSpinner
    post_solveSpinner: post_solveSpinner
    separateSpinner: separateSpinner

    BoxLayout:
        Spinner:
            id: colTypeASpinner
            text: "default"
            values: app.root.mainTools.col_types
            on_text: root.typeChanged(self)
        Button:
            text:"+"
            size_hint_x: None
            width: self.height
            on_press: root.newType(self)
    Label:
        text: "and"
        #begin=None, pre_solve=None, post_solve=None, separate=None
    Spinner:
        id: colTypeBSpinner
        text: "default"
        values: app.root.mainTools.col_types
        on_text: root.typeChanged(self)
    BoxLayout:
        Label:
            text:"Start Touching (begin)"
        Spinner:
            id: beginSpinner
            values: app.root.mainTools.col_funcs
            on_text: root.calleeChanged(self, "begin")
    BoxLayout:
        Label:
            text:"Are Touching (pre_solve)"
        Spinner:
            id: pre_solveSpinner
            values: app.root.mainTools.col_funcs
            on_text: root.calleeChanged(self, "pre_solve")
    BoxLayout:
        Label:
            text:"Are Touching (post_solve)"
        Spinner:
            id: post_solveSpinner
            values: app.root.mainTools.col_funcs
            on_text: root.calleeChanged(self, "post_solve")
    BoxLayout:
        Label:
            text:"Stop Touching (separate)"
        Spinner:
            id: separateSpinner
            values: app.root.mainTools.col_funcs
            on_text: root.calleeChanged(self, "separate")


<MainTools>
    id:mtid
    leftMenu: leftMenu
    rightMenu: rightMenu
    createMenu: createMenu.__self__
    primMenu: primMenu.__self__
    polyMenu: polyMenu.__self__
    splineMenu: splineMenu.__self__
    prefabMenu: prefabMenu.__self__
    examplePrefabsMenu: examplePrefabsMenu.__self__
    customPrefabsMenu: customPrefabsMenu.__self__
    rootMenu: rootMenu
    joinMenu: joinMenu.__self__
    entityMenu: entityMenu.__self__
    massSlider: massSlider
    gravxSlider: gravxSlider
    gravySlider: gravySlider
    spriteSpinner: spriteSpinner
    selectedMenu: selectedMenu
    spritePreview: spritePreview
    nameBox: nameBox
    selectedMenuView: selectedMenuView.__self__
    fileMenu: fileMenu.__self__
    settingsMenu: settingsMenu.__self__
    examplesMenu: examplesMenu.__self__
    levelsMenu: levelsMenu.__self__
    #groupsMenu: groupsMenu.__self__
    inputPreview: inputPreview
    cloneSpriteButton: cloneSpriteButton
    historyBar: historyBar

    FloatLayout:
        id: topMenu
        size_hint: (.6, .2)
        orientation: 'horizontal'
        pos_hint: {'x':.2, 'y':.8}
        StackLayout:
            id: historyBar
            pos_hint: {'x':.0, 'y':.6}
            size_hint: (1., .4)
            orientation: 'lr-tb'
            Button:
                text:"spline"
                size_hint_x:.2
                on_press: root.setToolFromButton(self)
            Button:
                text:"camera"
                size_hint_x:.2
                on_press: root.setToolFromButton(self)
            Button:
                text:"drag"
                size_hint_x:.2
                on_press: root.setToolFromButton(self)
        Label:
            id: inputPreview
            pos_hint: {'x':.2, 'y':.4}
            size_hint: (.6, .2)
            text: ""
            on_text: root.timed_clear_inputPreview(self)

    
    BoxLayout:
        id: rightMenu
        size_hint: (.15, 1)
        orientation: 'horizontal'
        pos_hint: {'x':.85, 'y':0}
        ScrollView:
            id: selectedMenuView
            GridLayout:
                cols: 1
                spacing: 4
                size_hint_y: None
                row_default_height: '30sp'
                row_force_default: False
                id: selectedMenu
                selectedLabel: selectedLabel
                cpicker:cpicker
                xposLabel: xposLabel
                yposLabel: yposLabel
                xvelLabel: xvelLabel
                yvelLabel: yvelLabel
                angleLabel: angleLabel
                shapeInfo: shapeInfo
                height: self.minimum_height
                frictionLabel: frictionLabel
                massLabel: massLabel
                elasLabel: elasLabel
                texLabel: texLabel
                imgWidthLabel: imgWidthLabel
                imgHeightLabel: imgHeightLabel
                colTypeSpinner: colTypeSpinner
                delButton: delButton
                Label:
                    id: selectedLabel
                    text: "selected item"
                BoxLayout:
                    #height:100
                    Label:
                        text: "x:"
                    FloatInput:
                        id: xposLabel
                        text: "position"
                        on_text_validate: if root.fireText: root.xposChanged(self)
                BoxLayout:
                    Label:
                        text: "y:"
                    FloatInput:
                        id: yposLabel
                        text: "position"
                        on_text_validate: if root.fireText: root.yposChanged(self)
                BoxLayout:
                    Label:
                        text: "xvel:"
                    FloatInput:
                        id: xvelLabel
                        on_text_validate: if root.fireText: root.xvelChanged(self)
                BoxLayout:
                    Label:
                        text: "yvel:"
                    FloatInput:
                        id: yvelLabel
                        on_text_validate: if root.fireText: root.yvelChanged(self)
                BoxLayout:
                    Label:
                        text: "angle:"
                    FloatInput:
                        id: angleLabel
                        text: "angle"
                        on_text_validate: if root.fireText: root.angleChanged(self)
                Spinner:
                    id: texLabel
                    text: "texture"
                    on_text: if root.fireText: root.textureChanged(self)
                    values: root.sprite_list
                BoxLayout:
                    size_hint_y: None
                    height: 60
                    BoxLayout:
                        orientation: 'vertical'
                        Label:
                            text: 'dwidth'
                        FloatInput:
                            id: imgWidthLabel
                            text: '1'
                            on_text_validate: if root.fireText: root.imgWidthChanged(self.text)
                    BoxLayout:
                        orientation: 'vertical'
                        Label:
                            text: 'dheight'
                        FloatInput:
                            id: imgHeightLabel
                            text: '1'
                            on_text_validate: if root.fireText: root.imgHeightChanged(self.text)

                colpicker:
                    id:cpicker
                    text:"Color Tint"
                    color: (.5,.5,.5,1)
                BoxLayout:
                    Label:
                        text: "Mass:"
                    tbox:
                        id: massLabel
                        text: "Mass"
                        on_text_validate: if root.fireText: root.massChanged(self)
                BoxLayout:
                    Label:
                        text: "Friction:"
                    FloatInput:
                        id: frictionLabel
                        text: "Friction"
                        on_text_validate: if root.fireText: root.frictionChanged(self)
                BoxLayout:
                    Label:
                        text: "Elasticity:"
                    FloatInput:
                        id: elasLabel
                        text: "Elasticity"
                        on_text_validate: if root.fireText: root.elasChanged(self)
                #ToggleButton:
                #    id: sensorButton
                #    text:"Sensor"
                #    on_press: root.sensorPressed(self)
                BoxLayout:
                    id: shapeInfo
                    size_hint_y:None
                    height:60
                    orientation: 'vertical'
                Spinner:
                    id: colTypeSpinner
                    text: "default"
                    on_text: if root.fireText: root.colTypeChanged(self)
                    values: root.col_types
                Button:
                    id: delButton
                    text: 'delete'
                    on_press: root.delSelPressed(self)
                #Button:
                #    id: copyButton
                #    text: 'copy'
                #    on_press: root.copy_pressed(self)
                Button:
                    text: 'Variables'
                    on_press: root.varsPressed(self)
                Button:
                    text: 'Copy Selected'
                    on_press: root.copy_group_pressed(self)
                Button:
                    text: 'Export Prefab'
                    on_press: root.export_pressed(self)
        
    BoxLayout:
        id: leftMenu
        momemButton:momemButton
        size_hint: (.15, 1)
        orientation: 'horizontal'
        BoxLayout:
            id: rootMenu
            orientation: 'vertical'
            pos_hint: {'x': 0., 'y': 1.0 - self.size_hint[1]}
            padding: 4
            height: root.height
            Button:
                text: 'File'
                on_press: root.changel2menu(root.fileMenu)
            Button:
                text: 'Settings'
                on_press: root.changel2menu(root.settingsMenu)
            Label:
                text: 'Quick'
                size_hint_y: None
                height: self.font_size+6
                text_size: (self.width, self.height)
            Button:
                text: 'Quick Load'
                on_press: root.loadPressed(self)
            Button:
                text: 'Quick Save'
                on_press: root.savePressed(self)
            Label:
                text: 'Create'
                size_hint_y: None
                height: self.font_size+6
                text_size: (self.width, self.height)
            Button:
                text: 'Object'
                on_press: root.changel2menu(root.createMenu)
            Button:
                text: 'Start/End'
                on_press: root.changel2menu(root.entityMenu)
            Button:
                id: joinButton
                text: 'Joint'
                on_press: root.changel2menu(root.joinMenu)
            #ToggleButton:
            #    group: 'ToolGroup'
            #    id: pasteButton
            #    text: 'Paste'
            #    on_press: root.setTool("paste")
            ToggleButton:
                group: 'ToolGroup'
                id: pasteGButton
                text: 'Paste'
                on_press: root.setTool("paste-group")
            ToggleButton:
                group: 'ToolGroup'
                id: importGButton
                text: 'Prefab'
                on_press: root.changel2menu(root.prefabMenu)
            Label:
                text: 'Interact:'
                size_hint_y: None
                height: self.font_size+6
                text_size: (self.width, self.height)
            ToggleButton:
                group: 'ToolGroup'
                id: camButton
                text: 'Cam/Select'
                on_press: root.setTool("camera")
            ToggleButton:
                group: 'ToolGroup'
                id: sboxButton
                text: 'Select Box'
                on_press: root.setTool("select-box")
            ToggleButton:
                group: 'ToolGroup'
                id: vortexButton
                text: 'Vortex'
                on_press: root.setTool("vortex")
            ToggleButton:
                group: 'ToolGroup'
                id: dragButton
                text: 'Drag'
                on_press: root.setTool("drag")
            ToggleButton:
                group: 'ToolGroup'
                id: rotateButton
                text: 'Rotate'
                on_press: root.setTool("rotate")
            ToggleButton:
                group: 'ToolGroup'
                id: deleteButton
                text: 'Delete'
                on_press: root.setTool("del")
            ToggleButton:
                id: playButton
                text: 'Pause'
                on_press: root.playPressed(self)
            ToggleButton:
                id: momemButton
                text: 'NoMomentum'
                on_press: root.momemPressed(self)
            Button:
                id: Button
                text: 'scripts'
                on_press: root.scriptsPressed(self)
        BoxLayout:
            id: entityMenu
            orientation: 'vertical'
            pos_hint: {'x': 0., 'y': 1.0 - self.size_hint[1]}
            padding: 4
            height: root.height
            ToggleButton:
                group: 'ToolGroup'
                id: startButton
                text: 'Start'
                on_press: root.setTool("start")
            ToggleButton:
                group: 'ToolGroup'
                id: endButton
                text: 'End'
                on_press: root.setTool("end")
            ToggleButton:
                group: 'ToolGroup'
                id: blankButton
                text: 'Blank'
                on_press: root.setTool("blank")
        BoxLayout:
            id: polyMenu
            orientation: 'vertical'
            pos_hint: {'x': 0., 'y': 1.0 - self.size_hint[1]}
            padding: 4
            height: root.height
            brushSizeSlider: brushSizeSlider
            polyMergeButton: polyMergeButton
            polySimpleButton: polySimpleButton
            minlenslider: minlenslider
            ToggleButton:
                group: 'ToolGroup'
                id: polyButton
                text: 'PolyPaint'
                on_press: root.setTool("poly")
            ToggleButton:
                group: 'ToolGroup'
                id: polysubButton
                text: 'PolyErase'
                on_press: root.setTool("polysub")
            Label:
                text: 'Settings:'
            ToggleButton:
                id: polyMergeButton
                text: 'Merge Start'
                state: 'down'
                height: self.font_size+6
            ToggleButton:
                id: polySimpleButton
                text: 'One Outline'
                height: self.font_size+6
            BoxLayout:
                orientation: 'horizontal'
                Label:
                    text: "Brush"
                    #on_press: root.massPressed(self)
                Slider:
                    id: brushSizeSlider
                    orientation: "vertical"
                    min:5
                    max:500
                    value:25
                    on_value: root.brush_size_changed(self.value)
            Label:
                size_hint_y: None
                height: self.font_size+5
                text: 'MinLen:'
            Slider:
                size_hint_y: None
                height: 30
                id: minlenslider
                orientation: "horizontal"
                min:1
                max:80
                value:5
        BoxLayout:
            id: splineMenu
            orientation: 'vertical'
            pos_hint: {'x': 0., 'y': 1.0 - self.size_hint[1]}
            padding: 4
            height: root.height
            splineButton: splineButton
            splineEdButton: splineEdButton
            removePointButton: removePointButton
            smoothnessSlider: smoothnessSlider
            ToggleButton:
                group: 'ToolGroup'
                id: splineButton
                text: 'New Spline'
                on_press: root.setTool("spline")
            ToggleButton:
                group: 'ToolGroup'
                id: splineEdButton
                text: 'Edit Spline'
                on_press: root.setTool("splineed")
            ToggleButton:
                group: 'ToolGroup'
                id: removePointButton
                text: 'Remove Point'
                on_press: root.setTool("splinesub")
            Label:
                text: 'Settings:'
            BoxLayout:
                orientation: 'horizontal'
                Label:
                    text: "Smoothness"
                    #on_press: root.massPressed(self)
                Slider:
                    id: smoothnessSlider
                    orientation: "vertical"
                    min:1
                    max:10
                    value:4
                    step:1.
                    #on_value: root.brush_size_changed(self.value)
        BoxLayout:
            id: primMenu
            orientation: 'vertical'
            pos_hint: {'x': 0., 'y': 1.0 - self.size_hint[1]}
            padding: 4
            height: root.height
            ToggleButton:
                group: 'ToolGroup'
                id: circleButton
                text: 'Circle'
                on_press: root.setTool("circle")
            ToggleButton:
                group: 'ToolGroup'
                id: squareButton
                text: 'Square'
                on_press: root.setTool("square")
            ToggleButton:
                group: 'ToolGroup'
                id: boxButton
                text: 'Box'
                on_press: root.setTool("box")
            ToggleButton:
                group: 'ToolGroup'
                id: linesButton
                text: 'Lines'
                on_press: root.setTool("draw")
            ToggleButton:
                group: 'ToolGroup'
                id: plankButton
                text: 'Plank'
                on_press: root.setTool("plank")
        BoxLayout:
            id: prefabMenu
            orientation: 'vertical'
            pos_hint: {'x': 0., 'y': 1.0 - self.size_hint[1]}
            padding: 4
            height: root.height
            Button:
                id: circleButton
                text: 'Examples'
                on_press: root.changel3menu(root.examplePrefabsMenu)
            Button:
                text: 'Custom'
                on_press: root.customgroupPressed()
            #Button:
            #    text: 'Export Prefab'
        BoxLayout:
            id: createMenu
            orientation: 'vertical'
            pos_hint: {'x': 0., 'y': 1.0 - self.size_hint[1]}
            padding: 4
            height: root.height
            massSlider: massSlider
            massSliderLabel: massSliderLabel
            enablePhysics: enablePhysics
            enableDynamic:enableDynamic
            ToggleButton:
                id: primButton
                text: 'Primitive'
                on_press: root.changel3menu(root.primMenu)
            Button:
                text: 'Polygon'
                on_press: root.changel3menu(root.polyMenu)
            Button:
                text: 'Spline'
                on_press: root.changel3menu(root.splineMenu)
            Label:
                size_hint: (1,0.2)
                text: "Settings"
            Label:
                size_hint: (1,0.2)
                text: "  Image:"
            Spinner:
                id: spriteSpinner
                values: root.sprite_list
                on_text: root.spritePreview.source = 'atlas://assets/myatlas/'+self.text
            Image:
                id: spritePreview
                source: 'atlas://assets/myatlas/sheep'
            Label:
                size_hint: (1,0.2)
                text: "Physics"
            Switch:
                id: enablePhysics
                disabled: False
                active: True
                on_active:
                    enableDynamic.disabled = not self.active
                    massSlider.disabled = not enableDynamic.active or not self.active
                    print self.active
            Label:
                size_hint: (1,0.2)
                text: "Dynamic"
            Switch:
                id: enableDynamic
                disabled: False
                active: True
                on_active:
                    massSlider.disabled = not self.active
                    print self.active
            Label:
                id: massSliderLabel
                size_hint: (1,0.2)
                text: "Mass 100"
            Slider:
                id: massSlider
                orientation: "horizontal"
                size_hint_x: 1.5
                min:0.01
                max:400
                value:100
                on_value: massSliderLabel.text = "Mass: %.2f" % self.value
            #BoxLayout:
            #    orientation: 'horizontal'
            #    Button:
            #        text: "Mass"
            #        on_press: root.massPressed(self)
            #    Slider:
            #        id: massSlider
            #        orientation: "vertical"
            #        min:0
            #        max:100
            #        value:10
            ToggleButton:
                id: cloneSpriteButton
                text: 'clone mode'
                state: 'down'
        
        BoxLayout:
            id: joinMenu
            orientation: 'vertical'
            pos_hint: {'x': 0., 'y': 1.0 - self.size_hint[1]}
            padding: 4
            height: root.height
            ToggleButton:
                group: 'ToolGroup'
                text: 'Pin to World'
                on_press: root.setTool("pin")
            ToggleButton:
                group: 'ToolGroup'
                text: 'Point 2 Point'
                on_press: root.setTool("p2p")
            ToggleButton:
                group: 'ToolGroup'
                text: 'P2P Spring'
                on_press: root.setTool("p2ps")
            ToggleButton:
                group: 'ToolGroup'
                text: 'Center 2 Point'
                on_press: root.setTool("c2p")
            ToggleButton:
                group: 'ToolGroup'
                text: 'Center 2 Center'
                on_press: root.setTool("c2c")

        BoxLayout:
            id: examplesMenu
            orientation: 'vertical'
            pos_hint: {'x': 0., 'y': 1.0 - self.size_hint[1]}
            padding: 4
            height: root.height
        BoxLayout:
            id: levelsMenu
            orientation: 'vertical'
            pos_hint: {'x': 0., 'y': 1.0 - self.size_hint[1]}
            padding: 4
            height: root.height
        BoxLayout:
            id: customPrefabsMenu
            orientation: 'vertical'
            pos_hint: {'x': 0., 'y': 1.0 - self.size_hint[1]}
            padding: 4
            height: root.height
        BoxLayout:
            id: examplePrefabsMenu
            orientation: 'vertical'
            pos_hint: {'x': 0., 'y': 1.0 - self.size_hint[1]}
            padding: 4
            height: root.height
        BoxLayout:
            id: fileMenu
            orientation: 'vertical'
            pos_hint: {'x': 0., 'y': 1.0 - self.size_hint[1]}
            padding: 4
            height: root.height
            Label:
                size_hint_y: None
                height:40
                id: nameBox
                text: 'defaultlevel'
            Button:
                text: 'New'
                on_press: root.newPressed(self)
            Button:
                text: 'Clear'
                on_press: root.clearPressed(self)
            Button:
                text: 'Load'
                on_press: root.customlvlPressed()
            Button:
                text: 'Examples'
                on_press: root.changel3menu(root.examplesMenu)
            Button:
                text: 'Save As...'
                on_press: root.saveAsPressed(self)
            Button:
                text: 'Export Wheelz'
                on_press: root.wheelzPressed(self)
            Button:
                text: 'Download'
                on_press: root.downloadsPressed(self)
            Button:
                text: 'Upload'
                on_press: root.uploadPressed(self)
        BoxLayout:
            id: settingsMenu
            orientation: 'vertical'
            pos_hint: {'x': 0., 'y': 1.0 - self.size_hint[1]}
            padding: 4
            height: root.height
            BoxLayout:
                orientation: 'vertical'
                Label:
                    text: "Gravity"
                    size_hint: (1, .2)
                Button:
                    text: 'reset'
                    size_hint: (1, .2)
                    on_press: gravySlider.value = 0; gravxSlider.value = 0
                Slider:
                    id: gravySlider
                    orientation: "vertical"
                    min:-1000
                    max:1000
                    value:0
                    on_value: root.setygrav(self.value)
                Slider:
                    id: gravxSlider
                    size_hint: (2, .2)
                    orientation: "horizontal"
                    min:-1000
                    max:1000
                    value:0
                    on_value: root.setxgrav(self.value)
        
<PlainButton>:
    
                
<MainScreen@GameScreen>:
    name: 'main'
    FloatLayout:
        size: root.size
        pos: root.pos
        MainTools:
            id: mainTools

