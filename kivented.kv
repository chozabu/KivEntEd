#:kivy 1.8.0
#:import SlideTransition kivy.uix.screenmanager.SlideTransition 
#:set COLOR_HIGHLIGHT (0.788235294, 0.643137255, 1)
#:set COLOR_BACKGROUND (0.349019608, 0.082352941, 0.658823529)
#:set COLOR_BACKGROUND_A50 (0.349019608, 0.082352941, 0.658823529, .5)
#:set COLOR_BORDER (0.643137255, 0.160784314, 1)
#:set COLOR_BORDER_A50 (0.643137255, 0.160784314, 1, .5)
#:set COLOR_BORDER_A75 (0.643137255, 0.160784314, 1, .75)
#:set COLOR_HIGHLIGHT_A50 (0.788235294, 0.643137255, 1, .5)
#:set COLOR_HIGHLIGHT_A100 (0.788235294, 0.643137255, 1, 1.0)
#:set COLOR_BACKGROUND_A100 (0.349019608, 0.082352941, 0.658823529, 1.0)
#:set COLOR_BORDER_A100 (0.643137255, 0.160784314, 1, 1.0)

TestGame:

<TestGame>:
    gameworld: gameworld
    GameWorld:
        id: gameworld
        gamescreenmanager: gamescreenmanager
        PositionSystem:
            system_id: 'position'
            gameworld: gameworld
        RotateSystem:
            system_id: 'rotate'
            gameworld: gameworld
        ColorSystem:
            system_id: 'color'
            gameworld: gameworld
        GameView:
            system_id: 'gameview'
            focus_entity: False
            updateable: True
            gameworld: gameworld
            pos: root.pos
            do_scroll: True
            do_scroll_lock: False
            size: root.size
        GameMap:
            system_id: 'map'
            map_size: root.size
            gameworld: gameworld
        Renderer:
            gameworld: gameworld
            system_id: 'renderer'
            do_rotate: True
            #do_color: True
            shader_source: 'assets/glsl/positionrotateshader.glsl'
            atlas_dir: 'assets/'
            atlas: 'myatlas'
        DynamicRenderer:
            gameworld: gameworld
            system_id: 'physics_renderer'
            do_color: True
            shader_source: 'assets/glsl/positionrotateshader.glsl'
            atlas_dir: 'assets/'
            atlas: 'myatlas'
            physics_system: 'physics'
        CymunkPhysics:
            gameworld: root.gameworld
            system_id: 'physics'
            viewport: 'gameview'
    GameScreenManager:
        id: gamescreenmanager
        size: root.size
        pos: root.pos
        gameworld: gameworld

<GameScreenManager>:
    MainScreen:
        id: main_screen

<tbox@TextInput>
    multiline: False
<CircleSettings@BoxLayout>
    radiusLabel:radiusLabel
    size_hint_y:None
    height:30
    BoxLayout:
        Label:
            text: "radius:"
        TextInput:
            id: radiusLabel
            multiline: False
            text: "radius"
<BoxSettings@BoxLayout>
    orientation: 'vertical'
    widthLabel:widthLabel
    heightLabel:heightLabel
    spacing: 4
    #size_hint_y:None
    #height:60
    #rows_minimum:60
    BoxLayout:
        Label:
            text: "width:"
        TextInput:
            id: widthLabel
            multiline: False
            text: "width"
    BoxLayout:
        Label:
            text: "height:"
        TextInput:
            id: heightLabel
            multiline: False
            text: "height"
<entDataItem@BoxLayout>
    size_hint_y: None
    height: 30
    keyLabel: keyLabel
    valueLabel: valueLabel
    #Button:
    #    text:"+"
    #    size_hint_x: None
    #    width: self.height
    #    on_press: root.newType(self)
    Label:#make into a label
        id: keyLabel
        text: ""
        #values: app.root.mainTools.data_key_types
        #on_text: root.typeChanged(self)
    Label:
        text:"="
        size_hint_x: None
        width: self.height
    TextInput:
        id: valueLabel
        multiline: False
        text: ""
        on_text: root.valueChanged(self)
<entDataBox@BoxLayout>
    orientation: 'vertical'
    dataItems: dataItems
    BoxLayout:
        id: dataItems
    Button:
        size_hint_y: None
        height: 30
        text: "Add Item"
        on_press: root.newItem()#dataItems.add_widget(entDataItem())

<levelItem@BoxLayout>
    orientation: 'horizontal'
    nameLabel: nameLabel
    authorLabel: authorLabel
    createdLabel: createdLabel
    modifiedLabel: modifiedLabel
    downloadButton: downloadButton
    downloadsLabel: downloadsLabel
    Label:
        id: nameLabel
        text: "Name"
    #Label:
    #    text: "Rating"
    Label:
        id: authorLabel
        text: "Author"
    Label:
        id: createdLabel
        text: "Created"
    Label:
        id: modifiedLabel
        text: "Modified"
    Button:
        id: downloadButton
        text: "Download"
    Label:
        id: downloadsLabel
        text: "Downloads"

<downloads@BoxLayout>
    orientation: 'vertical'
    levelBox: levelBox
    sortSpinner: sortSpinner
    reverseButton: reverseButton

    BoxLayout:
        size_hint_y: 0.1
        orientation: 'horizontal'
        Button:
            text: "Upload"
            on_press: root.uploadLevel()
    BoxLayout:
        size_hint_y: 0.1
        orientation: 'horizontal'
        Label:
            text: "sort by:"
        Spinner:
            id: sortSpinner
            text: "name"
            values: ['name', 'author', 'rating', 'dateAdded', 'downloads', 'dateModified']
            #on_text: root.typeChanged(self)

        ToggleButton:
            id: reverseButton
            text:"reverse"
        Button:
            text:"GO"
            on_press: root.goPressed(self)
    BoxLayout:
        id: levelBox
        orientation: 'vertical'
    BoxLayout:
        size_hint_y: 0.1
        orientation: 'horizontal'
        Button:
            text: "previous"
            on_press: root.prevPage()
        Button:
            text: "next"
            on_press: root.nextPage()

<callbacks@BoxLayout>
    orientation: 'vertical'
    colTypeASpinner: colTypeASpinner
    colTypeBSpinner: colTypeBSpinner

    beginSpinner: beginSpinner
    pre_solveSpinner: pre_solveSpinner
    post_solveSpinner: post_solveSpinner
    separateSpinner: separateSpinner

    BoxLayout:
        Spinner:
            id: colTypeASpinner
            text: "default"
            values: app.root.mainTools.col_types
            on_text: root.typeChanged(self)
        Button:
            text:"+"
            size_hint_x: None
            width: self.height
            on_press: root.newType(self)
    Label:
        text: "and"
        #begin=None, pre_solve=None, post_solve=None, separate=None
    Spinner:
        id: colTypeBSpinner
        text: "default"
        values: app.root.mainTools.col_types
        on_text: root.typeChanged(self)
    BoxLayout:
        Label:
            text:"Start Touching (begin)"
        Spinner:
            id: beginSpinner
            values: app.root.mainTools.col_funcs
            on_text: root.calleeChanged(self, "begin")
    BoxLayout:
        Label:
            text:"Are Touching (pre_solve)"
        Spinner:
            id: pre_solveSpinner
            values: app.root.mainTools.col_funcs
            on_text: root.calleeChanged(self, "pre_solve")
    BoxLayout:
        Label:
            text:"Are Touching (post_solve)"
        Spinner:
            id: post_solveSpinner
            values: app.root.mainTools.col_funcs
    BoxLayout:
        Label:
            text:"Stop Touching (separate)"
        Spinner:
            id: separateSpinner
            values: app.root.mainTools.col_funcs


<MainTools@FloatLayout>
    id:mtid
    leftMenu: leftMenu
    rightMenu: rightMenu
    createMenu: createMenu.__self__
    rootMenu: rootMenu
    joinMenu: joinMenu.__self__
    entityMenu: entityMenu.__self__
    massSlider: massSlider
    gravxSlider: gravxSlider
    gravySlider: gravySlider
    spriteSpinner: spriteSpinner
    selectedMenu: selectedMenu
    nameBox: nameBox
    selectedMenuView: selectedMenuView.__self__
    fileMenu: fileMenu.__self__
    examplesMenu: examplesMenu.__self__
    levelsMenu: levelsMenu.__self__
    
    BoxLayout:
        id: rightMenu
        size_hint: (.15, 1)
        orientation: 'horizontal'
        pos_hint: {'x':.85, 'y':0}
        ScrollView:
            id: selectedMenuView
            GridLayout:
                cols: 1
                spacing: 4
                size_hint_y: None
                row_default_height: 30
                row_force_default: False
                id: selectedMenu
                selectedLabel: selectedLabel
                xposLabel: xposLabel
                yposLabel: yposLabel
                xvelLabel: xvelLabel
                yvelLabel: yvelLabel
                angleLabel: angleLabel
                shapeInfo: shapeInfo
                redLabel: redLabel
                greenLabel: greenLabel
                blueLabel: blueLabel
                opacityLabel: opacityLabel
                height: self.minimum_height
                frictionLabel: frictionLabel
                massLabel: massLabel
                elasLabel: elasLabel
                texLabel: texLabel
                colTypeSpinner: colTypeSpinner
                delButton: delButton
                Label:
                    id: selectedLabel
                    text: "selected item"
                BoxLayout:
                    #height:100
                    Label:
                        text: "x:"
                    tbox:
                        id: xposLabel
                        text: "position"
                        on_text: root.xposChanged(self)
                BoxLayout:
                    Label:
                        text: "y:"
                    tbox:
                        id: yposLabel
                        text: "position"
                        on_text: root.yposChanged(self)
                BoxLayout:
                    Label:
                        text: "xvel:"
                    tbox:
                        id: xvelLabel
                        on_text: root.xvelChanged(self)
                BoxLayout:
                    Label:
                        text: "yvel:"
                    tbox:
                        id: yvelLabel
                        on_text: root.yvelChanged(self)
                BoxLayout:
                    Label:
                        text: "angle:"
                    tbox:
                        id: angleLabel
                        text: "angle"
                        on_text: root.angleChanged(self)
                Spinner:
                    id: texLabel
                    text: "texture"
                    on_text: root.textureChanged(self)
                    values: root.sprite_list
                BoxLayout:
                    size_hint_y: None
                    height: 60
                    BoxLayout:
                        orientation: 'vertical'
                        Label:
                            text: 'R'
                        tbox:
                            id: redLabel
                            text: '1'
                            on_text: root.redChanged(self.text)
                    BoxLayout:
                        orientation: 'vertical'
                        Label:
                            text: 'G'
                        tbox:
                            id: greenLabel
                            text: '1'
                            on_text: root.greenChanged(self.text)
                    BoxLayout:
                        orientation: 'vertical'
                        Label:
                            text: 'B'
                        tbox:
                            id: blueLabel
                            text: '1'
                            on_text: root.blueChanged(self.text)
                    BoxLayout:
                        orientation: 'vertical'
                        Label:
                            text: 'O'
                        tbox:
                            id: opacityLabel
                            text: '1'
                            on_text: root.opacityChanged(self.text)
                BoxLayout:
                    Label:
                        text: "Mass:"
                    tbox:
                        id: massLabel
                        text: "Mass"
                        on_text: root.massChanged(self)
                BoxLayout:
                    Label:
                        text: "Friction:"
                    tbox:
                        id: frictionLabel
                        text: "Friction"
                        on_text: root.frictionChanged(self)
                BoxLayout:
                    Label:
                        text: "Elasticity:"
                    tbox:
                        id: elasLabel
                        text: "Elasticity"
                        on_text: root.elasChanged(self)
                #ToggleButton:
                #    id: sensorButton
                #    text:"Sensor"
                #    on_press: root.sensorPressed(self)
                BoxLayout:
                    id: shapeInfo
                    size_hint_y:None
                    height:60
                    orientation: 'vertical'
                Spinner:
                    id: colTypeSpinner
                    text: "default"
                    on_text: root.colTypeChanged(self)
                    values: root.col_types
                Button:
                    id: delButton
                    text: 'delete'
                    on_press: root.delSelPressed(self)
                Button:
                    id: copyButton
                    text: 'copy'
                    on_press: root.entcpy = root.gameref.serials.entToDict(root.selectedEntity)
                Button:
                    text: 'Variables'
                    on_press: root.varsPressed(self)
        
    BoxLayout:
        id: leftMenu
        size_hint: (.15, 1)
        orientation: 'horizontal'
        BoxLayout:
            id: rootMenu
            orientation: 'vertical'
            pos_hint: {'x': 0., 'y': 1.0 - self.size_hint[1]}
            padding: 4
            height: root.height
            Button:
                text: 'File'
                on_press: root.changel2menu(root.fileMenu)
            ToggleButton:
                group: 'ToolGroup'
                id: camButton
                text: 'Camera'
                on_press: root.setTool("camera")
            Button:
                text: 'Create'
                on_press: root.changel2menu(root.createMenu)
            Button:
                text: 'Entity'
                on_press: root.changel2menu(root.entityMenu)
            Button:
                id: joinButton
                text: 'Join'
                on_press: root.changel2menu(root.joinMenu)
            Button:
                id: playButton
                text: 'pause/play'
                on_press: root.playPressed(self)
            ToggleButton:
                group: 'ToolGroup'
                id: vortexButton
                text: 'Vortex'
                on_press: root.setTool("vortex")
            ToggleButton:
                group: 'ToolGroup'
                id: dragButton
                text: 'Drag'
                on_press: root.setTool("drag")
            ToggleButton:
                group: 'ToolGroup'
                id: rotateButton
                text: 'Rotate'
                on_press: root.setTool("rotate")
            ToggleButton:
                group: 'ToolGroup'
                id: deleteButton
                text: 'Delete'
                on_press: root.setTool("del")
            ToggleButton:
                group: 'ToolGroup'
                id: pasteButton
                text: 'Paste'
                on_press: root.setTool("paste")
            Button:
                id: Button
                text: 'scripts'
                on_press: root.scriptsPressed(self)
        BoxLayout:
            id: entityMenu
            orientation: 'vertical'
            pos_hint: {'x': 0., 'y': 1.0 - self.size_hint[1]}
            padding: 4
            height: root.height
            ToggleButton:
                group: 'ToolGroup'
                id: startButton
                text: 'Start'
                on_press: root.setTool("start")
            ToggleButton:
                group: 'ToolGroup'
                id: endButton
                text: 'End'
                on_press: root.setTool("end")
            ToggleButton:
                group: 'ToolGroup'
                id: blankButton
                text: 'Blank'
                on_press: root.setTool("blank")
        BoxLayout:
            id: createMenu
            orientation: 'vertical'
            pos_hint: {'x': 0., 'y': 1.0 - self.size_hint[1]}
            padding: 4
            height: root.height
            ToggleButton:
                group: 'ToolGroup'
                id: circleButton
                text: 'Circles'
                on_press: root.setTool("circle")
            ToggleButton:
                group: 'ToolGroup'
                id: squareButton
                text: 'Square'
                on_press: root.setTool("square")
            ToggleButton:
                group: 'ToolGroup'
                id: boxButton
                text: 'Box'
                on_press: root.setTool("box")
            ToggleButton:
                group: 'ToolGroup'
                id: linesButton
                text: 'Lines'
                on_press: root.setTool("draw")
            ToggleButton:
                group: 'ToolGroup'
                id: plankButton
                text: 'Plank'
                on_press: root.setTool("plank")
            Label:
                size_hint: (1,0.2)
                text: "Settings"
            Label:
                size_hint: (1,0.2)
                text: "  Image:"
            Spinner:
                id: spriteSpinner
                values: root.sprite_list
            BoxLayout:
                orientation: 'horizontal'
                Button:
                    text: "Mass"
                    on_press: root.massPressed(self)
                Slider:
                    id: massSlider
                    orientation: "vertical"
                    min:0
                    max:100
                    value:10
        
        BoxLayout:
            id: joinMenu
            orientation: 'vertical'
            pos_hint: {'x': 0., 'y': 1.0 - self.size_hint[1]}
            padding: 4
            height: root.height
            ToggleButton:
                group: 'ToolGroup'
                text: 'Pin to World'
                on_press: root.setTool("pin")
            ToggleButton:
                group: 'ToolGroup'
                text: 'Point 2 Point'
                on_press: root.setTool("p2p")
            ToggleButton:
                group: 'ToolGroup'
                text: 'P2P Spring'
                on_press: root.setTool("p2ps")
            ToggleButton:
                group: 'ToolGroup'
                text: 'Center 2 Point'
                on_press: root.setTool("c2p")
            ToggleButton:
                group: 'ToolGroup'
                text: 'Center 2 Center'
                on_press: root.setTool("c2c")

        BoxLayout:
            id: examplesMenu
            orientation: 'vertical'
            pos_hint: {'x': 0., 'y': 1.0 - self.size_hint[1]}
            padding: 4
            height: root.height
        BoxLayout:
            id: levelsMenu
            orientation: 'vertical'
            pos_hint: {'x': 0., 'y': 1.0 - self.size_hint[1]}
            padding: 4
            height: root.height
        BoxLayout:
            id: fileMenu
            orientation: 'vertical'
            pos_hint: {'x': 0., 'y': 1.0 - self.size_hint[1]}
            padding: 4
            height: root.height
            Button:
                text: 'Save'
                on_press: root.savePressed(self)
            Button:
                text: 'Load'
                on_press: root.loadPressed(self)
            Button:
                text: 'Export Wheelz'
                on_press: root.wheelzPressed(self)
            tbox:
                size_hint_y: None
                height:40
                id: nameBox
                text: 'defaultlevel'
            Button:
                text: 'Examples'
                on_press: root.changel3menu(root.examplesMenu)
            Button:
                text: 'Custom'
                on_press: root.customlvlPressed()
            Button:
                text: 'Download'
                on_press: root.downloadsPressed(self)
            Button:
                text: 'Clear'
                on_press: root.clearPressed(self)
            BoxLayout:
                orientation: 'vertical'
                Label:
                    text: "Gravity"
                    size_hint: (1, .2)
                Slider:
                    id: gravySlider
                    orientation: "vertical"
                    min:-1000
                    max:1000
                    value:0
                    on_value: root.setygrav(self.value)
                Slider:
                    id: gravxSlider
                    size_hint: (1, .2)
                    orientation: "horizontal"
                    min:-1000
                    max:1000
                    value:0
                    on_value: root.setxgrav(self.value)
        
<PlainButton@Button>:
    
                
<MainScreen@GameScreen>:
    name: 'main'
    FloatLayout:
        size: root.size
        pos: root.pos
        MainTools:
            id: mainTools

